// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3707.SwerveRobot.subsystems;

import org.usfirst.frc3707.SwerveRobot.Robot;
import org.usfirst.frc3707.SwerveRobot.RobotMap;
import org.usfirst.frc3707.SwerveRobot.commands.*;
import org.usfirst.frc3707.SwerveRobot.swerve.*;

import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.smartdashboard.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveSystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogPotentiometer frontRightEncoder = RobotMap.driveSystemFrontRightEncoder;
    private final WPI_TalonSRX frontRightTalon = RobotMap.driveSystemFrontRightTalon;
    private final PIDController frontRightTwist = RobotMap.driveSystemFrontRightTwist;
    private final AnalogPotentiometer frontLeftEncoder = RobotMap.driveSystemFrontLeftEncoder;
    private final WPI_TalonSRX frontLeftTalon = RobotMap.driveSystemFrontLeftTalon;
    private final PIDController frontLeftTwist = RobotMap.driveSystemFrontLeftTwist;
    private final AnalogPotentiometer backRightEncoder = RobotMap.driveSystemBackRightEncoder;
    private final WPI_TalonSRX backRightTalon = RobotMap.driveSystemBackRightTalon;
    private final PIDController backRightTwist = RobotMap.driveSystemBackRightTwist;
    private final AnalogPotentiometer backLeftEncoder = RobotMap.driveSystemBackLeftEncoder;
    private final WPI_TalonSRX backLeftTalon = RobotMap.driveSystemBackLeftTalon;
    private final PIDController backLeftTwist = RobotMap.driveSystemBackLeftTwist;
    private final SpeedController frontRightDrive = RobotMap.driveSystemFrontRightDrive;
    private final SpeedController frontLeftDrive = RobotMap.driveSystemFrontLeftDrive;
    private final SpeedController backRightDrive = RobotMap.driveSystemBackRightDrive;
    private final SpeedController backLeftDrive = RobotMap.driveSystemBackLeftDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private final ADXRS450_Gyro gyro = RobotMap.gyro;
    
    SwerveWheel frontLeftWheel = new SwerveWheel(frontLeftTwist, frontLeftDrive, -55);
    SwerveWheel frontRightWheel = new SwerveWheel(frontRightTwist, frontRightDrive, -88);
    SwerveWheel backLeftWheel = new SwerveWheel(backLeftTwist, backLeftDrive, -22);
    SwerveWheel backRightWheel = new SwerveWheel(backRightTwist, backRightDrive, -22);
    SwerveDrive swerve = new SwerveDrive(frontRightWheel, frontLeftWheel, backLeftWheel, backRightWheel, gyro);
    
    public void enable() {
    	frontLeftTwist.enable();
    	frontRightWheel.enable();
    	backLeftWheel.enable();
    	backRightWheel.enable();
    }
    public void disable() {
    	frontLeftTwist.disable();
    	frontRightWheel.disable();
    	backLeftWheel.disable();
    	backRightWheel.disable();
    }
    public void drive(double directionX, double directionY, double rotation) {
    	swerve.drive(directionX, directionY, rotation);
    }
    
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

