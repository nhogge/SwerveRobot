// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3707.SwerveRobot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.smartdashboard.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AnalogPotentiometer driveSystemFrontRightEncoder;
    public static WPI_TalonSRX driveSystemFrontRightTalon;
    public static PIDController driveSystemFrontRightTwist;
    public static AnalogPotentiometer driveSystemFrontLeftEncoder;
    public static WPI_TalonSRX driveSystemFrontLeftTalon;
    public static PIDController driveSystemFrontLeftTwist;
    public static AnalogPotentiometer driveSystemBackRightEncoder;
    public static WPI_TalonSRX driveSystemBackRightTalon;
    public static PIDController driveSystemBackRightTwist;
    public static AnalogPotentiometer driveSystemBackLeftEncoder;
    public static WPI_TalonSRX driveSystemBackLeftTalon;
    public static PIDController driveSystemBackLeftTwist;
    public static SpeedController driveSystemFrontRightDrive;
    public static SpeedController driveSystemFrontLeftDrive;
    public static SpeedController driveSystemBackRightDrive;
    public static SpeedController driveSystemBackLeftDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static ADXRS450_Gyro gyro;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSystemFrontRightEncoder = new AnalogPotentiometer(1, 360.0, 0.0);
        LiveWindow.addSensor("DriveSystem", "FrontRightEncoder", driveSystemFrontRightEncoder);
        
        driveSystemFrontRightTalon = new WPI_TalonSRX(1);
        
        
        driveSystemFrontRightTwist = new PIDController(0.05, 0.0, 0.0, 0.0, driveSystemFrontRightEncoder, driveSystemFrontRightTalon, 0.02);
        LiveWindow.addActuator("DriveSystem", "FrontRightTwist", driveSystemFrontRightTwist);
        driveSystemFrontRightTwist.setAbsoluteTolerance(0.2);

        driveSystemFrontRightTwist.setInputRange(0.0, 360.0);
        driveSystemFrontRightTwist.setOutputRange(-1.0, 1.0);
        driveSystemFrontRightTwist.setContinuous(true);
        SmartDashboard.putData("DriveSystem FrontRightTwist", driveSystemFrontRightTwist);
        driveSystemFrontLeftEncoder = new AnalogPotentiometer(0, 360.0, 0.0);
        LiveWindow.addSensor("DriveSystem", "FrontLeftEncoder", driveSystemFrontLeftEncoder);
        
        driveSystemFrontLeftTalon = new WPI_TalonSRX(4);
        
        
        driveSystemFrontLeftTwist = new PIDController(0.05, 0.0, 0.0, 0.0, driveSystemFrontLeftEncoder, driveSystemFrontLeftTalon, 0.02);
        LiveWindow.addActuator("DriveSystem", "FrontLeftTwist", driveSystemFrontLeftTwist);
        driveSystemFrontLeftTwist.setAbsoluteTolerance(0.2);

        driveSystemFrontLeftTwist.setInputRange(0.0, 360.0);
        driveSystemFrontLeftTwist.setOutputRange(-1.0, 1.0);
        driveSystemFrontLeftTwist.setContinuous(true);
        SmartDashboard.putData("DriveSystem FrontLeftTwist", driveSystemFrontLeftTwist);
        driveSystemBackRightEncoder = new AnalogPotentiometer(2, 360.0, 0.0);
        LiveWindow.addSensor("DriveSystem", "BackRightEncoder", driveSystemBackRightEncoder);
        
        driveSystemBackRightTalon = new WPI_TalonSRX(2);
        
        
        driveSystemBackRightTwist = new PIDController(0.05, 0.0, 0.0, 0.0, driveSystemBackRightEncoder, driveSystemBackRightTalon, 0.02);
        LiveWindow.addActuator("DriveSystem", "BackRightTwist", driveSystemBackRightTwist);
        driveSystemBackRightTwist.setAbsoluteTolerance(0.2);

        driveSystemBackRightTwist.setInputRange(0.0, 360.0);
        driveSystemBackRightTwist.setOutputRange(-1.0, 1.0);
        driveSystemBackRightTwist.setContinuous(true);
        SmartDashboard.putData("DriveSystem BackRightTwist", driveSystemBackRightTwist);
        driveSystemBackLeftEncoder = new AnalogPotentiometer(3, 360.0, 0.0);
        LiveWindow.addSensor("DriveSystem", "BackLeftEncoder", driveSystemBackLeftEncoder);
        
        driveSystemBackLeftTalon = new WPI_TalonSRX(3);
        
        
        driveSystemBackLeftTwist = new PIDController(0.05, 0.0, 0.0, 0.0, driveSystemBackLeftEncoder, driveSystemBackLeftTalon, 0.02);
        LiveWindow.addActuator("DriveSystem", "BackLeftTwist", driveSystemBackLeftTwist);
        driveSystemBackLeftTwist.setAbsoluteTolerance(0.2);

        driveSystemBackLeftTwist.setInputRange(0.0, 360.0);
        driveSystemBackLeftTwist.setOutputRange(-1.0, 1.0);
        driveSystemBackLeftTwist.setContinuous(true);
        SmartDashboard.putData("DriveSystem BackLeftTwist", driveSystemBackLeftTwist);
        driveSystemFrontRightDrive = new VictorSP(1);
        LiveWindow.addActuator("DriveSystem", "FrontRightDrive", (VictorSP) driveSystemFrontRightDrive);
        driveSystemFrontRightDrive.setInverted(false);
        driveSystemFrontLeftDrive = new VictorSP(4);
        LiveWindow.addActuator("DriveSystem", "FrontLeftDrive", (VictorSP) driveSystemFrontLeftDrive);
        driveSystemFrontLeftDrive.setInverted(false);
        driveSystemBackRightDrive = new VictorSP(2);
        LiveWindow.addActuator("DriveSystem", "BackRightDrive", (VictorSP) driveSystemBackRightDrive);
        driveSystemBackRightDrive.setInverted(false);
        driveSystemBackLeftDrive = new VictorSP(3);
        LiveWindow.addActuator("DriveSystem", "BackLeftDrive", (VictorSP) driveSystemBackLeftDrive);
        driveSystemBackLeftDrive.setInverted(false);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        gyro = new ADXRS450_Gyro();
        LiveWindow.addSensor("Sensors", "gyro", gyro);
    }
}
